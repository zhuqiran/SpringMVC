<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--配置组件扫描器，扫描controller包中定义的Controller类-->
    <context:component-scan base-package="com.csust.mvc.controller"/>
    <!--配置视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--注册Mvc的注解驱动：导入时一定要注意命名空间不要选错，我们需要的命名空间是：xmlns:mvc="http://www.springframework.org/schema/mvc"-->
    <mvc:annotation-driven/>

    <!--<mvc:default-servlet-handler/>-->
    <!--当DispatcherServlet的url-pattern配置为/之后，解决静态资源访问问题-->
    <!--
    第一种解决方式，该种方式依赖服务器的实现。
        这种方式的实现原理，即判断当前的请求资源为静态资源时，将该请求的处理交给tomcat服务器定义的，名称为default的Servlet
    缺点：正是因为依赖于服务器的实现，所以这也是他的缺点。
    -->
    <!--<mvc:default-servlet-handler/>-->

    <!--
    第二种解决方法：使用spring框架自己提供的解决方法。
        在Spring3.0版本后， Spring定义了专门用于处理静态资源访问请求的处理器ResourceHttpRequestHandler。
        并且添加了 <mvc:resources/>标签，专门用于解决静态资源无法访问问题。 需要在 springmvc配置文件中添
        加如下形式的配置：
        location: 表示静态资源所在目录。当然，目录不要使用 /WEB INF/及其子目录 。
        mapping: 表示对该资源的请求（以/static/开始的请求，如 /static/images/1.jpg 等 ）。
                注意，后面是两个星号 **，表示该请求路径下的任意请求
    -->
    <mvc:resources mapping="/static/**" location="/static/"/>
</beans>